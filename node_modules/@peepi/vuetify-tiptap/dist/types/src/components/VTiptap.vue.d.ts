import { Vue } from "vue-property-decorator";
import { Editor, AnyExtension } from "@tiptap/vue-2";
export default class extends Vue {
    readonly value: string | null;
    readonly view: boolean;
    readonly dark: boolean;
    readonly dense: boolean;
    readonly outlined: boolean;
    readonly disabled: boolean;
    readonly label: string | null;
    readonly placeholder: string | null;
    readonly toolbar: string[];
    readonly append: string[];
    readonly hideToolbar: boolean;
    readonly disableToolbar: boolean;
    readonly xss: boolean | string[];
    readonly xssOptions: Record<string, string[]>;
    readonly extensions: AnyExtension[];
    readonly editorClass: string | string[] | object;
    editor: Editor | null;
    get cleanValue(): string;
    get items(): any[];
    created(): void;
    onValueChanged(value: any): void;
    onDisabledChanged(disabled: any): void;
    beforeDestroy(): void;
    handleKeyDown(view: any, event: any): boolean;
    onSelectionUpdate({ editor }: {
        editor: any;
    }): void;
    onUpdate({ editor }: {
        editor: any;
    }): void;
    selectedAlignment: string;
    onAlignmentChanged(newValue: any, oldValue: any): void;
    getAlignment(): "left" | "center" | "right" | "justify";
    selectedColor: any;
    get selectedColorBorder(): string;
    setEmoji(e: any): void;
    headingsItems: {
        text: string;
        value: number;
    }[];
    selectedHeading: number;
    onHeadingChanged(newValue: any, oldValue: any): void;
    getHeading(): 1 | 2 | 3 | 0;
    readonly uploadImage: (file: File) => Promise<string>;
    get defaultUploadImage(): (file: File) => Promise<string>;
    imageDialog: boolean;
    get selectedImage(): any;
    linkDialog: boolean;
    get selectedLink(): any;
    videoDialog: boolean;
    get selectedVideo(): any;
    get defaultMentionItems(): any;
    readonly mentionItems: any;
    readonly mention: boolean;
    mentionConfig: {
        loading: boolean;
        items: any[];
        selected: number;
        show: boolean;
        query: string;
        x: number;
        y: number;
        command: (_: any) => number;
        fetchMentions: any;
    };
    selectMention(index: any): void;
}
